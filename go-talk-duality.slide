What is Go?

A cultural agenda of radical simplicity.

19 Apr 2016
Tags: oss, lang, systems programming

Josh Finken, Rob King
Reality Capture and Processing, HERE
josh.finken@here.com
robert.1.king@here.com

* Quick Overview of:

- History and Origins
- Semantics
- Readability
- Simplicity
- A few features

* History and Origins

- Conceived late 2007 at Google. Rob Pike, Ken Thompson. 
- Go 1 released March 2012.
- A systems language: write, read, debug and maintain large software systems.
- Designed for scale: large programs with large numbers of dependencies, large numbers of programmers.
- Stated goal: _Clean_ _procedural_ _language_ _designed_ _for_ _scalable_ _cloud_ _software._ [1]

.link https://talks.golang.org/2015/simplicity-is-complicated.slide#15 [1] Simplicity is complicated, Rob Pike.

* Semantics

- Small, simple and opinionated without sacrificing sophistication. 
- Compiled, statically typed.  
- Of the C-family (syntax), but also Pascal/Modula/Oberon families.
- Concurrency at the language level:  native, robust, designed for multicore machines.
- Garbage-collected. 

* Readability

- Features _may_ make the language better but certainly makes it bigger.
- Features add complexity.
- Readability has been made paramount.
- Opinionated: preferable to have just one way, or at least fewer, simpler ways.

* Simplicity: Go will not compete on features

- As of Go 1, the language is fixed: 
.link https://golang.org/doc/go1compat Go 1 Compatibility Promise.
- Too many features, one spends time choosing which ones to use.
- Implement, refine, possibly rethink, redo. 
- No implicit numeric conversions.
- No constructors or destructors.
- No operator overloading.
- No inheritance.
- No generics.
- No execeptions.
- No function annotations.  To name a few...

* Ok fine, a few features

- Garbage Collection
- Interfaces
- Concurrency 

* As of Go 1.6: ~3ms GC pause time [1]:

.image images/gcgotip.png

.link http://talks.golang.org/2016/state-of-go.slide#38 [1] The State of Go

* Interfaces

- Perhaps Go's more powerful feature.
- No concept of class inheritance: no _inherits_, _implements_, nor _extends_ keywords.
- Structural (aka duck) typing: _interface_.
- Structs represent data while interfaces represent behavioral abstraction.
- Enables true component architectures and library design.

* A quck OO-based example:

.play interface_animal.go

* A more real-world example with io:

.code interface_from_package_io.go

* A more real-world example with io:

.play interface_readwriter.go

* Compose: embedding

- A type can be embedded in another type
- Akin to "super" being called automatically

.code compose_structs.go /START1 OMIT/,/END1 OMIT/

* Compose: 

- Field and methods are promoted 

.code compose_structs.go /START2 OMIT/,/END2 OMIT/

* Concurrency

- Native simple approach at the language level: _goroutine_
- Akin to lightweight threads
- Are a variant of [[https://en.wikipedia.org/wiki/Communicating_sequential_processes][Communicating Sequential Processes]], a dual of the Actor model
- Message-passing through a non-buffered channel:  rendezvous point
- Message-passing through a buffered channel: asynchronous 

* Concurrency: goroutines

.play concurrency_goroutine.go

* Concurrency: channels

.play concurrency_channels.go

* Concurrency: buffered channels

- Sends to a buffered channel block only when the buffer is full.  
- Receives block when the buffer is empty.

.play concurrency_buffered_channels.go
