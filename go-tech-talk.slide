What is Go?
A quick tour
12 Apr 2016
Tags: oss, lang, systems programming

Josh Finken
Reality Capture and Processing, HERE
josh.finken@here.com

* Quick Overview of:

- History and Semantics 
- Composition over Inheritance
- Concurrency
- Tools and Dev Environments
- Who's Using Go

* History and Semantics

- Conceived late 2007 at Google. Rob Pike, Ken Thompson. 
- Write, read, debug and maintain large software systems.
- Designed for scale: large programs with large numbers of dependencies, large numbers of programmers.
- Goal:  be productive now with large software systems.

* Semantics

- Procedural, of the C-family, modern.
- Compiled, statically typed.
- No pointer arithmetic!  
- Concurrency:  native, robust, simple approach at the language level.
- Garbage-collected. 

* As of Go 1.6: ~3ms GC pause time [1]:

.image images/gcgotip.png

.link http://talks.golang.org/2016/state-of-go.slide#38 [1] The State of Go

* Composition over Inheritance:

- No concept of class inheritance: no _inherits_, _implements_, nor _extends_ keywords 
- Structural (aka duck) typing: _interface_
- Create abstractions by considering the _behavior_ that is common between datatypes

.code interface_animal.go

* A more real-world example:

.code -numbers interface_http.go /START2 OMIT/,/END2 OMIT/

* Compose:

- We now we can define an arbitrary number of types, each unpacks from an HTTP request. 
- It is now up to _Banana_ and _Eisenhower_ to decide how they may be represented. 
- Then, we can build around the MyEntity type to create things like generic HTTP handlers.

.code -numbers interface_http.go /START1 OMIT/,/END1 OMIT/

* Concurrency

- Native simple approach at the language level: _goroutine_
- Sorta like lightweight threads.
- Are a variant of [[https://en.wikipedia.org/wiki/Communicating_sequential_processes][Communicating Sequential Processes]], a dual of the Actor model.
